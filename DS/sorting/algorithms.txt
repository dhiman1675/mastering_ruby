########################################################################################
##### SORTING ALGORITHMS ###############################################################
########################################################################################
########################################################################################
1: Bubble sort
________________________________________________________________________________________
=> Works by comparing 2 items at a time and then swap them if necessary.
   Need to repeat this process untill done

   ex:   [9, 2, 1, 4, 3, 8]
         step1: [2, 1, 4, 3, 8, 9]
         step2: [1, 2, 3, 4, 8, 9]
=> Time complexity
    best case: O(n)
    worst case: O(n^2)


########################################################################################
2. Selection sort
----------------------------------------------------------------------------------------
=> 1. Need to find the smallest element in the array and swap it with the index 0
   2. Now we have 2 parts, sorted part(index 0) and unsorted part(index 1..length - 1)
   3. Need find smallest element from unsorted array and replace it with index 1
   4. Repeat it for 2..3..4.... ðŸ˜ƒ untill done

=> Time complexity
   best case: Passes(O(n)) + Comparisons(O(n)) => O(n^2)
   worst case: Passes(O(n)) + Comparisons(on(n)) => O(n^2)

########################################################################################
3. Insertion sort
----------------------------------------------------------------------------------------
=> 1. Start with the first element as sorted(assumming it in the right position)

   2. check with second element in array and compare it with first if the second element
      is smaller than first. we will store the second element in a
      variable(commonly called current) and shift the first to the right postion.

      - in this we did not swap elements like other algorithms

      - now the value at index 0 is empty as we shifted the value to the right. So now we can
        insert the current variable value at index 0

    3. Now we have 2 parts sorted and one part unsorted. So in every step, we will pick
       one element from the unsorted part and put it in the sorted part

       - to put it in the right position we will repeat the 2nd step, but the only difference
         is from the sorted part we only move the needed element to the right.

         EX = [2, 19, 5, 6]
                current = 5
                but we only move 19 to the right because it is smaller than 5 and it means it's in
                the right position

    4. repeat step 3

=> Time complexity
   best case: O(n)
   worst case: O(n^2)

########################################################################################
4. Merge sort
----------------------------------------------------------------------------------------
=>  Merge sort breaks down a list into smaller lists and then sorts them and in the end
    merges back those smaller sorted lists

=> Divide the arrays from middle until they are not indivisible and then arrange them in
   a sorted way


=> Time complexity
   best case: O(n log n)
   worst case: O(n log n)

=> Space complexity: O(n)

########################################################################################
5. Quick sort
----------------------------------------------------------------------------------------
=> Is the one of the most used sorting algorithm

=> We start by selecting a item which we call pivot. Then we rearrange the items according
   to the pivot like all the items smaller then pivot to left side and all the items
   greator than the pivot to the right side of the pivot and this approch is called
   partitioning

=> Generally we take last item as pivot but there are variation of this algorithm where we
    choose first item as pivot

=> Then we move pivot to the right position means all the item to left are smaller than
    pivot and all the item right are greater

=> Then we need to repeat this process to the arrays left and right to the pivot.

=> Which every partition we narrow down the scope of work and thats by quicksort has
   logarithmic complexity.

=> Partitioning
    - `i` for iteration and `b` for left partition boundary
    - Initially, we set `b` to -1, assuming that there is only a right partition
    - `b` is like the end of the left partition
    - We iterate over the array and check if the item is smaller than the pivot or not
      If yes, then we swap the item to the left and increment the boundary by 1
    - When all the smaller numbers are on the left, we need to put the pivot after the left
      partition, and now the boundary holds its index

=> Time complexity: best = O(n log n), worst = O(n^2)
=> Space complexity: best = O(log n), worst = O(n)

=> We can prefer Quick sort over Merge sort because Quick sort requires less space

########################################################################################
6. Counting sort
----------------------------------------------------------------------------------------
=>

########################################################################################
7. Bucket sort
----------------------------------------------------------------------------------------
=>
